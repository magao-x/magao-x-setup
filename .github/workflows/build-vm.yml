name: Build virtual machine
on:
  workflow_run:
    workflows: ["Container build"]
    types: [completed]
    branches: [main]
jobs:
  build-vm-stage1:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      vmArch: ${{ contains(matrix.os, 'macos') && 'aarch64' || 'x86_64' }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Rocky ISO
        uses: actions/cache@v4
        id: cache-iso
        with:
          path: xvm/input/iso
          key: rocky-iso-${{ hashFiles('xvm/_common.sh','xvm/download_rocky_iso.sh') }}
      - name: Cache first stage VM
        uses: actions/cache@v4
        id: cache-vm-stage1
        with:
          path: xvm/stage1_outputs.tar
          key: xvm-stage1-${{ env.vmArch }}-${{ hashFiles('**','!.github/**','!xvm/input/**','!xvm/output/**') }}-v1
      - name: Download Rocky ISO
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          cd $GITHUB_WORKSPACE/xvm/
          bash download_rocky_iso.sh
      - name: Install Homebrew
        if: runner.os == 'macOS' && steps.cache-vm-stage1.outputs.cache-hit != 'true'
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - name: Install QEMU for Ubuntu
        if: runner.os == 'Linux' && steps.cache-vm-stage1.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-system-x86 rpm2cpio
      - name: Install QEMU for macOS
        if: runner.os == 'macOS' && steps.cache-vm-stage1.outputs.cache-hit != 'true'
        run: |
          sysctl machdep.cpu
          brew install qemu
      - name: Create VM and install Rocky 9
        if: steps.cache-vm-stage1.outputs.cache-hit != 'true'
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            bash build_vm_stage1.sh
      - name: Bundle outputs as tar file
        if: steps.cache-vm-stage1.outputs.cache-hit != 'true'
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            tar -cvf stage1_outputs.tar ./output/
            rm ./output/*
      - name: Upload stage 1 outputs
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: stage1_vm
          path: xvm/stage1_outputs.tar
  build-vm-stage2:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      vmArch: ${{ contains(matrix.os, 'macos') && 'aarch64' || 'x86_64' }}
    needs: build-vm-stage1
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache second stage VM
        uses: actions/cache@v4
        id: cache-vm-stage2
        with:
          path: xvm/stage2_outputs.tar
          key: xvm-stage2-${{ env.vmArch }}-${{ hashFiles('**','!.github/**','!xvm/input/**','!xvm/output/**') }}-v1
      - name: Install QEMU for Ubuntu
        if: runner.os == 'Linux' && steps.cache-vm-stage2.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm rpm2cpio expect
      - name: Install QEMU for macOS
        if: runner.os == 'macOS' && steps.cache-vm-stage2.outputs.cache-hit != 'true'
        run: |
          sysctl machdep.cpu
          brew install qemu expect
      - name: Download initial Rocky VM
        if: steps.cache-vm-stage2.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
            name: stage1_vm
            path: xvm/
      - name: Extract previous job outputs
        if: steps.cache-vm-stage2.outputs.cache-hit != 'true'
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            tar -xvf stage1_outputs.tar
            rm stage1_outputs.tar
            mv -v output/xvm_stage1.qcow2 output/xvm.qcow2
      - name: Install MagAO-X software
        if: steps.cache-vm-stage2.outputs.cache-hit != 'true'
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            bash build_vm_stage2.sh
      - name: Bundle outputs as tar file
        if: steps.cache-vm-stage2.outputs.cache-hit != 'true'
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            tar -cvf stage2_outputs.tar ./output/xvm_stage2.qcow2 ./output/xvm_key ./output/xvm_key.pub ./output/firmware_vars.fd ./output/firmware_code.fd
      - name: Upload stage 2 outputs
        uses: actions/upload-artifact@v4
        with:
          name: stage2_vm
          path: xvm/stage2_outputs.tar
  build-vm-stage3:
      # if: ${{ github.event.workflow_run.conclusion == 'success' }}
      strategy:
        matrix:
          os: [macos-latest]
      runs-on: ${{ matrix.os }}
      env:
        vmArch: ${{ contains(matrix.os, 'macos') && 'aarch64' || 'x86_64' }}
      needs: build-vm-stage2
      permissions:
        contents: read
        packages: write
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Cache second stage VM
          uses: actions/cache@v4
          id: cache-vm-stage3
          with:
            path: xvm/stage3_outputs.tar
            key: xvm-stage3-${{ env.vmArch }}-${{ hashFiles('**','!.github/**','!xvm/input/**','!xvm/output/**') }}-v1
        - name: Install QEMU for Ubuntu
          if: runner.os == 'Linux' && steps.cache-vm-stage3.outputs.cache-hit != 'true'
          run: |
            sudo apt-get update
            sudo apt-get install -y qemu-system-arm rpm2cpio expect
        - name: Install QEMU for macOS
          if: runner.os == 'macOS' && steps.cache-vm-stage3.outputs.cache-hit != 'true'
          run: |
            sysctl machdep.cpu
            brew install qemu expect
        - name: Download initial Rocky VM
          if: steps.cache-vm-stage3.outputs.cache-hit != 'true'
          uses: actions/download-artifact@v4
          with:
              name: stage2_vm
              path: xvm/
        - name: Extract previous job outputs
          if: steps.cache-vm-stage3.outputs.cache-hit != 'true'
          run: |
              cd $GITHUB_WORKSPACE/xvm/
              tar -xvf stage2_outputs.tar
              rm stage2_outputs.tar
              mv -v output/xvm_stage2.qcow2 output/xvm.qcow2
        - name: Install MagAO-X software
          if: steps.cache-vm-stage3.outputs.cache-hit != 'true'
          run: |
              cd $GITHUB_WORKSPACE/xvm/
              bash build_vm_stage3.sh
        - name: Bundle outputs as tar file
          if: steps.cache-vm-stage3.outputs.cache-hit != 'true'
          run: |
              cd $GITHUB_WORKSPACE/xvm/
              tar -cvf stage3_outputs.tar ./output/xvm_stage3.qcow2 ./output/xvm_key ./output/xvm_key.pub ./output/firmware_vars.fd ./output/firmware_code.fd
        - name: Upload stage 2 outputs
          uses: actions/upload-artifact@v4
          with:
            name: stage3_vm
            path: xvm/stage3_outputs.tar
  build-vm-stage4:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      vmArch: ${{ contains(matrix.os, 'macos') && 'aarch64' || 'x86_64' }}
    needs: build-vm-stage3
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install QEMU for Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm rpm2cpio
      - name: Install QEMU for macOS
        if: runner.os == 'macOS'
        run: |
          sysctl machdep.cpu
          brew install qemu
      - name: Download Rocky VM with dependencies
        uses: actions/download-artifact@v4
        with:
            name: stage3_vm
            path: xvm/
      - name: Extract previous job outputs
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            tar -xvf stage3_outputs.tar
            rm stage3_outputs.tar
            mv -v output/xvm_stage3.qcow2 output/xvm.qcow2
      - name: Install pigz for Ubuntu
        if: runner.os == 'Linux'
        run: |
            sudo apt-get update
            sudo apt-get install -y pigz
      - name: Install pigz for macOS
        if: runner.os == 'macOS'
        run: brew install pigz
      - name: Install MagAO-X software
        run: |
            cd $GITHUB_WORKSPACE/xvm/
            bash build_vm_stage4.sh
      - name: Upload virtual machine for UTM
        uses: actions/upload-artifact@v4
        with:
          name: utm_bundle_${{ env.vmArch }}
          path: xvm/output/bundle/MagAO-X_UTM_${{ env.vmArch }}.tar.gz
